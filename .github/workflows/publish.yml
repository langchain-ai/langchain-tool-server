---
name: Publish to PyPI

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

env:
  PYTHON_VERSION: "3.11"
  UV_FROZEN: "true"
  UV_NO_SYNC: "true"

jobs:
  # First, run lint and test to ensure quality
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: ["server"]
        python-version: ["3.11", "3.12"]
        exclude:
          # Only run lint on one Python version per package to save resources
          - package: "server"
            python-version: "3.11"
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python + uv
        uses: "./.github/actions/uv_setup"
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set working directory
        id: set-workdir
        run: |
          echo "workdir=./libs/server" >> $GITHUB_OUTPUT

      - name: Install dependencies
        working-directory: ${{ steps.set-workdir.outputs.workdir }}
        run: uv sync --group test

      - name: Run lint
        working-directory: ${{ steps.set-workdir.outputs.workdir }}
        run: make lint

      - name: Run tests
        working-directory: ${{ steps.set-workdir.outputs.workdir }}
        run: make test

  # Check version and publish server package
  check-and-publish-server:
    needs: lint-and-test
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python + uv
        uses: "./.github/actions/uv_setup"
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Get current version from pyproject.toml
        id: get-version
        working-directory: ./libs/server
        run: |
          VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "current_version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: Get latest PyPI version
        id: get-pypi-version
        run: |
          PYPI_VERSION=$(python -c "
          import json, urllib.request, urllib.error
          try:
              with urllib.request.urlopen('https://pypi.org/pypi/langchain-tool-server/json') as response:
                  data = json.loads(response.read())
                  print(data['info']['version'])
          except urllib.error.HTTPError as e:
              if e.code == 404:
                  print('0.0.0')  # Package doesn't exist yet
              else:
                  raise
          ")
          echo "pypi_version=$PYPI_VERSION" >> $GITHUB_OUTPUT
          echo "PyPI version: $PYPI_VERSION"

      - name: Compare versions
        id: compare-versions
        run: |
          python -c "
          from distutils.version import LooseVersion
          current = LooseVersion('${{ steps.get-version.outputs.current_version }}')
          pypi = LooseVersion('${{ steps.get-pypi-version.outputs.pypi_version }}')
          should_publish = current > pypi
          print(f'Current: {current}, PyPI: {pypi}, Should publish: {should_publish}')
          " > version_comparison.txt
          cat version_comparison.txt
          
          SHOULD_PUBLISH=$(python -c "
          from distutils.version import LooseVersion
          current = LooseVersion('${{ steps.get-version.outputs.current_version }}')
          pypi = LooseVersion('${{ steps.get-pypi-version.outputs.pypi_version }}')
          print('true' if current > pypi else 'false')
          ")
          echo "should_publish=$SHOULD_PUBLISH" >> $GITHUB_OUTPUT

      - name: Build server package
        if: steps.compare-versions.outputs.should_publish == 'true'
        working-directory: ./libs/server
        run: uv build

      - name: Publish langchain-tool-server to PyPI
        if: steps.compare-versions.outputs.should_publish == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: libs/server/dist/
          verbose: true
          print-hash: true
          attestations: false

      - name: Create summary
        run: |
          if [ "${{ steps.compare-versions.outputs.should_publish }}" = "true" ]; then
            echo "✅ Published langchain-tool-server v${{ steps.get-version.outputs.current_version }} to PyPI" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ Skipped langchain-tool-server: v${{ steps.get-version.outputs.current_version }} not newer than PyPI v${{ steps.get-pypi-version.outputs.pypi_version }}" >> $GITHUB_STEP_SUMMARY
          fi
